package com.example.roi.controller;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.roi.model.RoiCalculationResponse;
import com.example.roi.model.RoiCalculationResponseWithPdf;
import com.example.roi.model.RoiRequest;
import com.example.roi.service.RoiPdfReportService;
import com.example.roi.service.RoiService;
import com.lowagie.text.DocumentException;

@RestController
@RequestMapping("/api/roi")
public class RoiController {

    @Autowired
    private RoiService roiService;
    @Autowired
    private RoiPdfReportService roiPdfReportService;

    @PostMapping("/calculate")
    public ResponseEntity<RoiCalculationResponseWithPdf> calculate(@RequestBody RoiRequest request) throws IOException, DocumentException {
        RoiCalculationResponse response = roiService.calculate(request);
        String pdfUrl = null;
        if (request.isIncludePdfBreakdown()) {
            String reportId = UUID.randomUUID().toString();
            roiPdfReportService.generateRoiReportToFile(response, reportId);
            pdfUrl = "/api/roi/reports/roi-report-" + reportId + ".pdf";
        }
        return ResponseEntity.ok(new RoiCalculationResponseWithPdf(response, pdfUrl));
    }

    @GetMapping("/reports/{filename:.+}")
    public ResponseEntity<Resource> getReport(@PathVariable String filename) throws IOException {
        Path file = Paths.get("/tmp").resolve(filename);
        Resource resource = new UrlResource(file.toUri());
        if (!resource.exists()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .contentType(MediaType.APPLICATION_PDF)
                .body(resource);
    }
} 